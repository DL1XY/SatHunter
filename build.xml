<?xml version="1.0"?>
<project name="SatHunter" default="deploy" basedir=".">
<!-- where the project source code is found -->
    <property name="src" location="src" />
    <property name="bin" location="bin" />
    <property name="libs" location="libs" />
    <property name="jardir" location="dist" />	
	<property name="jarfile" location="${jardir}/sathunter.jar" />        
    <property name="tempsrcdir" location="tempsrc"/>
    <property name="myname" value="DL11XY" />
    <property file="build.properties" />
	<property name="main-class" value="de.darc.dl1xy.sathunter.SatHunter"/>
	
	
    <!-- Delete old temporary dirs and creates new dirs -->
    <target name="init">
        <tstamp>
              <format property="compiletime" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>
        <echo message="creating build.properties"/>
        <delete dir="${jardir}" />
        <delete dir="${tempsrcdir}" />
        <delete dir="${bin}"/>
        <mkdir dir="${jardir}" />    	
        <mkdir dir="${tempsrcdir}" />
        <mkdir dir="${bin}"/>
    </target>

    <!-- Copy source files to a new directory.  I originally needed to do -->
    <!-- this because I did a substitution on the source code that put the-->
    <!-- name of the person compiling the code into the source.           -->
    <target name="copyfiles" depends="init">
        <copy todir="${tempsrcdir}" filtering="true">
            <fileset dir="${src}">
                <include name="**/*.java"/>
            </fileset>
        </copy>
        <echo message="copied source files"/>
    </target>
 
    <target name="compile" depends="init,copyfiles" description="compile classes">
        <javac destdir="${bin}" srcdir="${tempsrcdir}"  encoding="iso-8859-1" debug="on" debuglevel="lines,vars,source" classpath="${libs}/commons-lang-2.1.jar:${libs}/commons-logging-1.1.1.jar:${libs}/predict4java_1.1.1.jar">
        
        </javac>
    </target>
        
    <!-- Build the jar.  The important step here is the zipgroupfileset   -->
    <!-- which unpacks all my external jars and bundles them into the jar --> 
    <!-- we are building. The plugins.config file is for ImageJ plugins.  -->
    <!-- You would typically set the <manifest> here with something like  -->
    <!-- <attribute name="Main-Class" value="your.main.class"/>           -->
    <target name="jar" depends="init,copyfiles,compile" description="build jar">
    	
    	 <jar destfile="${jarfile}">
    	            <manifest>
    	                <attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader"/>
    	                <attribute name="Rsrc-Main-Class" value="${main-class}"/>
    	                <attribute name="Class-Path" value="."/>
    	                <attribute name="Rsrc-Class-Path" value="./ commons-lang-2.1.jar commons-logging-1.1.1.jar predict4java_1.1.1.jar"/>
    	            </manifest>
    	            <zipfileset src="jar-in-jar-loader.zip"/>
    	            <fileset dir="${bin}"/>    	 	 		
    	            <zipfileset dir="libs" includes="commons-lang-2.1.jar"/>
    	            <zipfileset dir="libs" includes="commons-logging-1.1.1.jar"/>
    	            <zipfileset dir="libs" includes="predict4java_1.1.1.jar"/>
    	           
    	        </jar>
    	  
     </target>

	<target name="deploy" depends="jar" description="delete all generated files but jar">
		   <delete dir="${tempsrcdir}" quiet="true"/>
	
	</target>
	
	
	
	
 </project>